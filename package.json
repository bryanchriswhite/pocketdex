{
  "name": "pocketdex",
  "version": "0.0.1",
  "description": "Pocketdex is an indexer for the Shannon implementation of the pocket network protocol.",
  "main": "dist/index.js",
  "scripts": {
    "codegen": "yarn exec subql codegen",
    "build": "./scripts/build.sh",
    "watch:build": "./scripts/build.sh no-lint",
    "prepack": "rm -rf dist && yarn run build",
    "lint": "yarn exec eslint src --ext .ts",
    "lint:fix": "yarn exec eslint src --ext .ts --fix",
    "format": "yarn exec prettier --loglevel error --write 'src/*.{js,ts,jsx,tsx}'",
    "format:ci": "yarn exec pretty-quick --verbose --check --pattern 'src/*.{js,ts,jsx,tsx}' --branch origin/main",
    "test": "yarn run build && subql-node-cosmos test",
    "test:ci": "env node vendor/subql-cosmos/packages/node/bin/run test",

    "vendor:setup": "echo 'installing and building vendor modules' && yarn vendor:cosmjs:install && yarn vendor:cosmjs:build && yarn vendor:subql:install && yarn install && yarn vendor:subql:build",
    "vendor:clean-cache": "cd vendor && yarn cache clean --all && cd cosmjs && yarn cache clean --all",
    "vendor:cosmjs:install": "cd vendor && yarn workspace cosmjs-monorepo-root install",
    "vendor:subql:install": "cd vendor && yarn workspace @subql/node-cosmos install",
    "vendor:cosmjs:build": "cd vendor && yarn workspace cosmjs-monorepo-root run build",
    "vendor:subql:build": "cd vendor && yarn workspace @subql/node-cosmos run build",
    "vendor:cosmjs:lint": "cd vendor && yarn workspace cosmjs-monorepo-root lint",
    "vendor:subql:lint": "cd vendor && yarn workspace @subql/node-cosmos lint",
    "vendor:clean": "echo 'cleaning vendor modules' && cd vendor && find . -name node_modules | xargs rm -rf && find . -name dist | xargs rm -rf",

    "docker:prepare": "cp .env.sample .env.development && cp .env.sample .env.test && cp .env.sample .env.production",

    "docker:check-env:prod": "env sh ./scripts/dotenv-check.sh production",
    "docker:build:prod": "yarn run docker:check-env:prod && docker compose --env-file .env.production build",
    "docker:build:no-cache:prod": "yarn run docker:check-env:prod && docker compose --env-file .env.production build --no-cache",
    "docker:start:prod": "yarn run docker:check-env:prod && docker compose --env-file .env.production up --remove-orphans",
    "docker:ps:prod": "yarn run docker:check-env:prod && docker compose --env-file .env.production ps",
    "docker:stop:prod": "yarn run docker:check-env:prod && docker compose --env-file .env.production stop",
    "docker:clean:prod": "yarn run docker:check-env:prod && docker compose --env-file .env.production down -v",
    "docker:tunnel:prod": "yarn run docker:check-env:prod && ./scripts/proxy-tunnel.sh production",

    "docker:check-env:dev": "env sh ./scripts/dotenv-check.sh development",
    "docker:build:dev": "yarn run docker:check-env:dev && docker compose --env-file .env.development build",
    "docker:build:no-cache:dev": "yarn run docker:check-env:dev && docker compose --env-file .env.development build --no-cache",
    "docker:start:dev": "yarn run docker:check-env:dev && docker compose --env-file .env.development up --remove-orphans",
    "docker:ps:dev": "yarn run docker:check-env:dev && docker compose --env-file .env.development ps",
    "docker:stop:dev": "yarn run docker:check-env:dev && docker compose --env-file .env.development stop",
    "docker:clean:dev": "yarn run docker:check-env:dev && docker compose --env-file .env.development down -v",
    "docker:tunnel:dev": "yarn run docker:check-env:dev && ./scripts/proxy-tunnel.sh development",

    "docker:check-env:test": "env sh ./scripts/dotenv-check.sh test",
    "docker:build:test": "yarn run docker:check-env:test && docker compose -f docker-compose-test.yml --env-file .env.test build",
    "docker:build:no-cache:test": "yarn run docker:check-env:test && docker compose -f docker-compose-test.yml --env-file .env.test build --no-cache",
    "docker:start:test": "yarn run docker:check-env:test && docker compose -f docker-compose-test.yml --env-file .env.test up --remove-orphans",
    "docker:ps:test": "yarn run docker:check-env:test && docker compose -f docker-compose-test.yml --env-file .env.test ps",
    "docker:stop:test": "yarn run docker:check-env:test && docker compose -f docker-compose-test.yml --env-file .env.test stop",
    "docker:clean:test": "yarn run docker:check-env:test && docker compose -f docker-compose-test.yml --env-file .env.test down -v"
  },
  "homepage": "https://github.com/subquery/cosmos-subql-starter",
  "repository": "github:subquery/cosmos-subql-starter",
  "files": [
    "dist",
    "schema.graphql",
    "project.yaml"
  ],
  "author": "Grove Team",
  "license": "MIT",
  "devDependencies": {
    "@cosmjs/stargate": "^0.28.9",
    "@subql/cli": "latest",
    "@subql/node-cosmos": "latest",
    "@subql/testing": "latest",
    "@typescript-eslint/eslint-plugin": "^5.10.2",
    "@typescript-eslint/parser": "^5.10.2",
    "dotenv": "latest",
    "eslint": "^8.8.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-header": "^3.1.1",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-jest": "^27.2.3",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-sort-destructure-keys": "^1.4.0",
    "nodemon": "^3.1.4",
    "prettier": "^2.5.1",
    "pretty-quick": "^3.1.3",
    "typescript": "^5.2.2"
  },
  "dependencies": {
    "@subql/types-cosmos": "latest",
    "@types/node": "^17.0.21",
    "pino": "^7.8.0",
    "ts-proto": "^1.112.1",
    "tslib": "^2.3.1"
  }
}
